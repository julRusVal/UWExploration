
from replot_from_csv import plot_csv
# base_directory = '/home/kurreman/catkin_ws/src/UWExploration/utils/plot_generator/data_collection/test_run_20231221_094131'

# In the given file path, find all instances of the file stats.csv

#Plot the stats.csv file using the plot_csv function

   #Together with the matplotlib window that is generated by the plot_csv function, I want a window to come up which gives me three buttons to click: 1. "Good" 2. "Bad" 3. "Star". I also want to be able to use the buttons 1, 2 and 3 to choose
   # Based on the button i click I want the full path of the stats.csv file to be written to one of three txt files based on the choice I made above. The txt files should be called "good.txt", "bad.txt" and "star.txt". If the file already exists, I want to append the path to the file.
   # I want the window to close when I click one of the buttons and go on to the next stats.csv file. 
   # I want the window with the three buttons to tell me how many stats.csv files are left to go through and which number I am currently on.

import os
import tkinter as tk
from tkinter import messagebox
from replot_from_csv import plot_csv
import matplotlib.pyplot as plt

# Function to handle user input (keyboard or GUI buttons)
def label_choice(choice):
    global count
    if choice in ("Good", "Bad", "Star"):
        # Close matplotlib window
        plt.close()
        
        # Define file name based on choice
        filename = os.path.join(base_directory, f"{choice.lower()}.txt")
        # Write or append file path to the respective file
        with open(filename, "a") as file:
            file.write(stats_csv_path + "\n")
        count -= 1
        update_label()

        if count > 0:
            plot_next_csv()
        else:
            root.destroy()

# Function to update the label text
def update_label():
    if root and label:
        try:
            # label.config(text=f"Files left: {count} Current file: {current_file}/{total_files}")
            label.config(text=f"Folder: {parent_folder}\nFiles left: {count} Current file: {current_file}/{total_files}") #TODO: fix correct folder name in the button windows
        except tk.TclError:
            pass

# Function to plot the next CSV
def plot_next_csv():
    global current_file
    global stats_csv_path
    global parent_folder
    current_file += 1
    stats_csv_path = next(csv_files, None)
    if stats_csv_path:
        # parent_folder = os.path.dirname(stats_csv_path)
        parent_folder = os.path.basename(os.path.dirname(stats_csv_path))

        plot_csv(stats_csv_path, vlines_x=[80, 96, 320, 336])
        update_label()
    else:
        messagebox.showinfo("Info", "No more files left.")
        root.destroy()

# Function to handle keyboard input
def on_key_press(event):
    key = event.keysym
    if key == "1":
        label_choice("Good")
    elif key == "2":
        label_choice("Bad")
    elif key == "3":
        label_choice("Star")

# Set the base directory path
base_directory = '/home/kurreman/catkin_ws/src/UWExploration/utils/plot_generator/data_collection/test_run_20231221_215841'

# Get all CSV files named "stats.csv" in the directory
csv_files = [os.path.join(root, file) for root, _, files in os.walk(base_directory) for file in files if file == "stats.csv"]
total_files = len(csv_files)
csv_files = iter(csv_files)
count = total_files
current_file = 1
stats_csv_path = next(csv_files, None)

# Create the main window
root = tk.Tk()
root.title("File Review Tool")

# Set window dimensions and position it at the top right
window_width = 400  # Define the width of the window
window_height = 150  # Define the height of the window
screen_width = root.winfo_screenwidth()
root.geometry(f"{window_width}x{window_height}+{screen_width - window_width}+0")
# Create a label to display file count information
# label = tk.Label(root, text=f"Files left: {count} Current file: {current_file}/{total_files}")
parent_folder = os.path.basename(os.path.dirname(stats_csv_path))
label = tk.Label(root, text=f"Param set: {parent_folder}\nFiles left: {count} Current file: {current_file}/{total_files}")
label.pack()

# Create buttons for options
button_good = tk.Button(root, text="Good", command=lambda: label_choice("Good"))
button_good.pack()

button_bad = tk.Button(root, text="Bad", command=lambda: label_choice("Bad"))
button_bad.pack()

button_star = tk.Button(root, text="Star", command=lambda: label_choice("Star"))
button_star.pack()

# Bind keyboard input
root.bind("<Key>", on_key_press)

# Plot the first CSV
if stats_csv_path:
    plot_csv(stats_csv_path, vlines_x=[80, 96, 320, 336])
    update_label()
else:
    messagebox.showinfo("Info", "No CSV files named stats.csv found.")
    root.destroy()


# Run the application
root.mainloop()
